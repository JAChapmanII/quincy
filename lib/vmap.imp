//----------------------------------------
void vmap_stringInit(char **str) { // {{{
	*str = NULL;
} // }}}
void vmap_stringFree(char *str) { // {{{
	free(str);
} // }}}

int vmap_stringCopy(char **dst, char **src) { // {{{
	if(*src == NULL)
		return INVALID_SOURCE;
	if(*dst != NULL) {
		free(*dst);
		*dst = NULL;
	}
	*dst = calloc(strlen(*src) + 1, 1);
	if(*dst == NULL)
		return ALLOC_FAIL;

	strcpy(*dst, *src);
	return SUCCESS;
} // }}}

int vmap_stringCompare(char *s1, char *s2) { // {{{
	return strcmp(s1, s2);
} // }}}

char *vmap_stringFormat(char *str) { // {{{
	char *copy = calloc(strlen(str) + 1, 1);
	if(copy == NULL) {
		return NULL; // TODO: better handling?
	}
	strcpy(copy, str);
	return copy;
} // }}}

size_t vmap_stringSize(char *str) { // {{{
	if(str == NULL)
		return 0;
	return strlen(str);
} // }}}

int vmap_stringWrite(char *str, FILE *file) { // {{{
	size_t len = strlen(str), byteSize = (2 << 8) - 1;
	if(len > byteSize)
		return FAILURE;

	uint8_t l = len;
	if(fwrite(&l, 1, 1, file) != 1)
		return FAILURE;// TODO: error handling? Seek backward?
	if(fwrite(str, 1, len, file) != len)
		return FAILURE;// TODO: error handling? Seek backward?

	return SUCCESS;
} // }}}

int vmap_stringRead(char **str, FILE *file) { // {{{
	uint8_t len = 0;
	if(fread(&len, 1, 1, file) != 1) {
		return FAILURE;// TODO: error handling? Seek?
	}

	*str = calloc(len + 1, 1);
	if(*str == NULL) {
		return ALLOC_FAIL; // TODO: error handling? Seek?
	}

	if(fread(*str, 1, len, file) != len) {
		return FAILURE;// TODO: error handling? Seek?
	}

	(*str)[len] = '\0';
	return SUCCESS;
} // }}}

// vim: ft=c:
